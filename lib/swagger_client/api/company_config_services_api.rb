=begin
#Trinet API

#Config API Specification

OpenAPI spec version: 1.0.0
Contact: api@trinet.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class CompanyConfigServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # findByDeptId
    # Gets the company departments details by Id
    # @param company_id companyId
    # @param department_id departmentId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dept_name deptName
    # @option opts [String] :include include
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponseListDepartment]
    def find_by_dept_id_using_get1(company_id, department_id, opts = {})
      data, _status_code, _headers = find_by_dept_id_using_get1_with_http_info(company_id, department_id, opts)
      return data
    end

    # findByDeptId
    # Gets the company departments details by Id
    # @param company_id companyId
    # @param department_id departmentId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dept_name deptName
    # @option opts [String] :include include
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponseListDepartment, Fixnum, Hash)>] ReturnResponseListDepartment data, response status code and response headers
    def find_by_dept_id_using_get1_with_http_info(company_id, department_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.find_by_dept_id_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.find_by_dept_id_using_get1" if company_id.nil?
      # verify the required parameter 'department_id' is set
      fail ArgumentError, "Missing the required parameter 'department_id' when calling CompanyConfigServicesApi.find_by_dept_id_using_get1" if department_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/departments/{departmentId}{?deptName,include,effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'departmentId' + '}', department_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deptName'] = opts[:'dept_name'] if !opts[:'dept_name'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListDepartment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#find_by_dept_id_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # findByDeptName
    # Gets the company departments details by name
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dept_name deptName
    # @option opts [String] :include include
    # @option opts [String] :dept_code deptCode
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponseListDepartment]
    def find_by_dept_name_using_get3(company_id, opts = {})
      data, _status_code, _headers = find_by_dept_name_using_get3_with_http_info(company_id, opts)
      return data
    end

    # findByDeptName
    # Gets the company departments details by name
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dept_name deptName
    # @option opts [String] :include include
    # @option opts [String] :dept_code deptCode
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponseListDepartment, Fixnum, Hash)>] ReturnResponseListDepartment data, response status code and response headers
    def find_by_dept_name_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.find_by_dept_name_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.find_by_dept_name_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/departments{?deptName,include,deptCode,effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'deptName'] = opts[:'dept_name'] if !opts[:'dept_name'].nil?
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'deptCode'] = opts[:'dept_code'] if !opts[:'dept_code'].nil?
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListDepartment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#find_by_dept_name_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getBenefitPlanYear
    # Gets the company benefit plan details
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponseBenefitPlanYear]
    def get_benefit_plan_year_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_benefit_plan_year_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getBenefitPlanYear
    # Gets the company benefit plan details
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponseBenefitPlanYear, Fixnum, Hash)>] ReturnResponseBenefitPlanYear data, response status code and response headers
    def get_benefit_plan_year_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_benefit_plan_year_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_benefit_plan_year_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/benefit-plan-year{?effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseBenefitPlanYear')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_benefit_plan_year_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getClientCurrentBenefits
    # Gets the company current benefits
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :efft_date efftDate
    # @return [ReturnResponseListCurrentBenefits]
    def get_client_current_benefits_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_client_current_benefits_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getClientCurrentBenefits
    # Gets the company current benefits
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :efft_date efftDate
    # @return [Array<(ReturnResponseListCurrentBenefits, Fixnum, Hash)>] ReturnResponseListCurrentBenefits data, response status code and response headers
    def get_client_current_benefits_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_client_current_benefits_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_client_current_benefits_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/benefits{?efftDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'efftDate'] = opts[:'efft_date'] if !opts[:'efft_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCurrentBenefits')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_client_current_benefits_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyBenefitClasses
    # Gets the company benefit classes list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponseListBenefitClass]
    def get_company_benefit_classes_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_benefit_classes_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanyBenefitClasses
    # Gets the company benefit classes list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponseListBenefitClass, Fixnum, Hash)>] ReturnResponseListBenefitClass data, response status code and response headers
    def get_company_benefit_classes_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_benefit_classes_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_benefit_classes_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/benefit-classes{?effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListBenefitClass')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_benefit_classes_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyHoliday
    # Gets the company holiday details
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_limit dateLimit
    # @return [ReturnResponseCompanyHolidayDetails]
    def get_company_holiday_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_company_holiday_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getCompanyHoliday
    # Gets the company holiday details
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :date_limit dateLimit
    # @return [Array<(ReturnResponseCompanyHolidayDetails, Fixnum, Hash)>] ReturnResponseCompanyHolidayDetails data, response status code and response headers
    def get_company_holiday_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_holiday_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_holiday_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/holidays{?dateLimit}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'dateLimit'] = opts[:'date_limit'] if !opts[:'date_limit'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseCompanyHolidayDetails')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_holiday_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyJobs
    # Gets the company jobs
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id jobId
    # @return [ReturnResponseListSelectItem]
    def get_company_jobs_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_company_jobs_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getCompanyJobs
    # Gets the company jobs
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id jobId
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_company_jobs_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_jobs_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_jobs_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/jobs".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'job_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_jobs_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyLeavePlanDetails
    # Gets the company leave plan details list
    # @param company_id companyId
    # @param plan_type planType
    # @param [Hash] opts the optional parameters
    # @option opts [String] :benefit_plan benefitPlan
    # @return [ReturnResponseListCompanyLeavePlanDetail]
    def get_company_leave_plan_details_using_get3(company_id, plan_type, opts = {})
      data, _status_code, _headers = get_company_leave_plan_details_using_get3_with_http_info(company_id, plan_type, opts)
      return data
    end

    # getCompanyLeavePlanDetails
    # Gets the company leave plan details list
    # @param company_id companyId
    # @param plan_type planType
    # @param [Hash] opts the optional parameters
    # @option opts [String] :benefit_plan benefitPlan
    # @return [Array<(ReturnResponseListCompanyLeavePlanDetail, Fixnum, Hash)>] ReturnResponseListCompanyLeavePlanDetail data, response status code and response headers
    def get_company_leave_plan_details_using_get3_with_http_info(company_id, plan_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_leave_plan_details_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_leave_plan_details_using_get3" if company_id.nil?
      # verify the required parameter 'plan_type' is set
      fail ArgumentError, "Missing the required parameter 'plan_type' when calling CompanyConfigServicesApi.get_company_leave_plan_details_using_get3" if plan_type.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/leave-plans/{planType}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'planType' + '}', plan_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'benefit_plan'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyLeavePlanDetail')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_leave_plan_details_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyLeavePlans
    # Gets the company leave plans list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :leave leave
    # @option opts [String] :employee_id employeeId
    # @return [ReturnResponseListCompanyLeavePlan]
    def get_company_leave_plans_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_leave_plans_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanyLeavePlans
    # Gets the company leave plans list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :leave leave
    # @option opts [String] :employee_id employeeId
    # @return [Array<(ReturnResponseListCompanyLeavePlan, Fixnum, Hash)>] ReturnResponseListCompanyLeavePlan data, response status code and response headers
    def get_company_leave_plans_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_leave_plans_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_leave_plans_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/leave-plans{?leave,employeeId}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'leave'] = opts[:'leave'] if !opts[:'leave'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyLeavePlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_leave_plans_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyLocationByLocationId
    # Gets the current locations
    # @param company_id companyId
    # @param location_id locationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponseLocation]
    def get_company_location_using_get3(company_id, location_id, opts = {})
      data, _status_code, _headers = get_company_location_using_get3_with_http_info(company_id, location_id, opts)
      return data
    end

    # getCompanyLocationByLocationId
    # Gets the current locations
    # @param company_id companyId
    # @param location_id locationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponseLocation, Fixnum, Hash)>] ReturnResponseLocation data, response status code and response headers
    def get_company_location_using_get3_with_http_info(company_id, location_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_location_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_location_using_get3" if company_id.nil?
      # verify the required parameter 'location_id' is set
      fail ArgumentError, "Missing the required parameter 'location_id' when calling CompanyConfigServicesApi.get_company_location_using_get3" if location_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/locations/{locationId}{?effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'locationId' + '}', location_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseLocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_location_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyLocations
    # Gets the company locations
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include include
    # @option opts [String] :location_name locationName
    # @option opts [String] :state_code stateCode
    # @option opts [BOOLEAN] :headquarter headquarter
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponseListLocation]
    def get_company_locations_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_locations_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanyLocations
    # Gets the company locations
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include include
    # @option opts [String] :location_name locationName
    # @option opts [String] :state_code stateCode
    # @option opts [BOOLEAN] :headquarter headquarter
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponseListLocation, Fixnum, Hash)>] ReturnResponseListLocation data, response status code and response headers
    def get_company_locations_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_locations_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_locations_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/locations{?include,locationName,stateCode,headquarter,effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = opts[:'include'] if !opts[:'include'].nil?
      query_params[:'locationName'] = opts[:'location_name'] if !opts[:'location_name'].nil?
      query_params[:'stateCode'] = opts[:'state_code'] if !opts[:'state_code'].nil?
      query_params[:'headquarter'] = opts[:'headquarter'] if !opts[:'headquarter'].nil?
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListLocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_locations_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyPayCodes
    # Gets the company pay codes
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type type
    # @return [ReturnResponseListCompanyPayCode]
    def get_company_pay_codes_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_pay_codes_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanyPayCodes
    # Gets the company pay codes
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type type
    # @return [Array<(ReturnResponseListCompanyPayCode, Fixnum, Hash)>] ReturnResponseListCompanyPayCode data, response status code and response headers
    def get_company_pay_codes_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_pay_codes_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_pay_codes_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/pay-codes{?type}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyPayCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_pay_codes_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyPayGroup
    # Gets the company pay gorup details
    # @param company_id companyId
    # @param paygroup_id paygroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponsePayGroup]
    def get_company_pay_group_using_get1(company_id, paygroup_id, opts = {})
      data, _status_code, _headers = get_company_pay_group_using_get1_with_http_info(company_id, paygroup_id, opts)
      return data
    end

    # getCompanyPayGroup
    # Gets the company pay gorup details
    # @param company_id companyId
    # @param paygroup_id paygroupId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponsePayGroup, Fixnum, Hash)>] ReturnResponsePayGroup data, response status code and response headers
    def get_company_pay_group_using_get1_with_http_info(company_id, paygroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_pay_group_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_pay_group_using_get1" if company_id.nil?
      # verify the required parameter 'paygroup_id' is set
      fail ArgumentError, "Missing the required parameter 'paygroup_id' when calling CompanyConfigServicesApi.get_company_pay_group_using_get1" if paygroup_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/paygroups/{paygroupId}{?effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'paygroupId' + '}', paygroup_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponsePayGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_pay_group_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyPayGroups
    # Gets the company pay gorups list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [ReturnResponseListPayGroup]
    def get_company_pay_groups_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_company_pay_groups_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getCompanyPayGroups
    # Gets the company pay gorups list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :effective_date effectiveDate
    # @return [Array<(ReturnResponseListPayGroup, Fixnum, Hash)>] ReturnResponseListPayGroup data, response status code and response headers
    def get_company_pay_groups_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_pay_groups_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_pay_groups_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/paygroups{?effectiveDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListPayGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_pay_groups_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyPayrollSchedulesByPaygroup
    # Gets the company payroll schedules by pay group Id
    # @param company_id companyId
    # @param paygroup paygroup
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date startDate
    # @option opts [String] :end_date endDate
    # @return [ReturnResponseListCompanyPayrollSchedulePayGroup]
    def get_company_payroll_schedules_by_paygroup_using_get1(company_id, paygroup, opts = {})
      data, _status_code, _headers = get_company_payroll_schedules_by_paygroup_using_get1_with_http_info(company_id, paygroup, opts)
      return data
    end

    # getCompanyPayrollSchedulesByPaygroup
    # Gets the company payroll schedules by pay group Id
    # @param company_id companyId
    # @param paygroup paygroup
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date startDate
    # @option opts [String] :end_date endDate
    # @return [Array<(ReturnResponseListCompanyPayrollSchedulePayGroup, Fixnum, Hash)>] ReturnResponseListCompanyPayrollSchedulePayGroup data, response status code and response headers
    def get_company_payroll_schedules_by_paygroup_using_get1_with_http_info(company_id, paygroup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_payroll_schedules_by_paygroup_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_payroll_schedules_by_paygroup_using_get1" if company_id.nil?
      # verify the required parameter 'paygroup' is set
      fail ArgumentError, "Missing the required parameter 'paygroup' when calling CompanyConfigServicesApi.get_company_payroll_schedules_by_paygroup_using_get1" if paygroup.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/payroll-schedules/{paygroup}{?startDate,endDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'paygroup' + '}', paygroup.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyPayrollSchedulePayGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_payroll_schedules_by_paygroup_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyPayrollSchedules
    # Gets the company payroll schedules list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date startDate
    # @option opts [String] :end_date endDate
    # @return [ReturnResponseListCompanyPayrollSchedulePayGroup]
    def get_company_payroll_schedules_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_payroll_schedules_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanyPayrollSchedules
    # Gets the company payroll schedules list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date startDate
    # @option opts [String] :end_date endDate
    # @return [Array<(ReturnResponseListCompanyPayrollSchedulePayGroup, Fixnum, Hash)>] ReturnResponseListCompanyPayrollSchedulePayGroup data, response status code and response headers
    def get_company_payroll_schedules_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_payroll_schedules_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_payroll_schedules_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/payroll-schedules{?startDate,endDate}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyPayrollSchedulePayGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_payroll_schedules_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyPolicies
    # Get the company policies
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @return [ReturnResponseListCompanyPolicy]
    def get_company_policies_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_policies_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanyPolicies
    # Get the company policies
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @return [Array<(ReturnResponseListCompanyPolicy, Fixnum, Hash)>] ReturnResponseListCompanyPolicy data, response status code and response headers
    def get_company_policies_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_policies_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_policies_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/workers-comp-policies{?state}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyPolicy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_policies_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyRoles
    # Gets the company roles
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListRole]
    def get_company_roles_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_company_roles_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getCompanyRoles
    # Gets the company roles
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListRole, Fixnum, Hash)>] ReturnResponseListRole data, response status code and response headers
    def get_company_roles_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_roles_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_roles_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/roles".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListRole')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_roles_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanySavingsPlansDetails
    # Gets the company savings plans details list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListCompanySavingsPlan]
    def get_company_savings_plans_details_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_savings_plans_details_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanySavingsPlansDetails
    # Gets the company savings plans details list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListCompanySavingsPlan, Fixnum, Hash)>] ReturnResponseListCompanySavingsPlan data, response status code and response headers
    def get_company_savings_plans_details_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_savings_plans_details_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_savings_plans_details_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/savings-plans".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanySavingsPlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_savings_plans_details_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyScheduleHoliday
    # Gets the company holiday schedule
    # @param company_id companyId
    # @param schedule schedule
    # @param [Hash] opts the optional parameters
    # @option opts [String] :year year
    # @return [ReturnResponseCompanyHolidayDetails]
    def get_company_schedule_holiday_using_get3(company_id, schedule, opts = {})
      data, _status_code, _headers = get_company_schedule_holiday_using_get3_with_http_info(company_id, schedule, opts)
      return data
    end

    # getCompanyScheduleHoliday
    # Gets the company holiday schedule
    # @param company_id companyId
    # @param schedule schedule
    # @param [Hash] opts the optional parameters
    # @option opts [String] :year year
    # @return [Array<(ReturnResponseCompanyHolidayDetails, Fixnum, Hash)>] ReturnResponseCompanyHolidayDetails data, response status code and response headers
    def get_company_schedule_holiday_using_get3_with_http_info(company_id, schedule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_schedule_holiday_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_schedule_holiday_using_get3" if company_id.nil?
      # verify the required parameter 'schedule' is set
      fail ArgumentError, "Missing the required parameter 'schedule' when calling CompanyConfigServicesApi.get_company_schedule_holiday_using_get3" if schedule.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/holidays/{schedule}{?year}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'schedule' + '}', schedule.to_s)

      # query parameters
      query_params = {}
      query_params[:'year'] = opts[:'year'] if !opts[:'year'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseCompanyHolidayDetails')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_schedule_holiday_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanySKRWorkersCompCodes
    # Gets the company skr workers comp codes list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @return [ReturnResponseListCompanyWorkerCompCode]
    def get_company_skr_workers_comp_codes_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_skr_workers_comp_codes_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanySKRWorkersCompCodes
    # Gets the company skr workers comp codes list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @return [Array<(ReturnResponseListCompanyWorkerCompCode, Fixnum, Hash)>] ReturnResponseListCompanyWorkerCompCode data, response status code and response headers
    def get_company_skr_workers_comp_codes_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_skr_workers_comp_codes_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_skr_workers_comp_codes_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/skr-workers-comp-codes".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'state'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyWorkerCompCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_skr_workers_comp_codes_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanySupervisors
    # Gets the company supervisors list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListCompanySupervisors]
    def get_company_supervisors_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_company_supervisors_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getCompanySupervisors
    # Gets the company supervisors list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListCompanySupervisors, Fixnum, Hash)>] ReturnResponseListCompanySupervisors data, response status code and response headers
    def get_company_supervisors_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_supervisors_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_supervisors_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/supervisors".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanySupervisors')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_supervisors_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompanyWorkersCompCodes
    # Gets the company workers comp codes list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @option opts [String] :work_comp_code workCompCode
    # @return [ReturnResponseListCompanyWorkerCompCode]
    def get_company_workers_comp_codes_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_company_workers_comp_codes_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getCompanyWorkersCompCodes
    # Gets the company workers comp codes list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state state
    # @option opts [String] :work_comp_code workCompCode
    # @return [Array<(ReturnResponseListCompanyWorkerCompCode, Fixnum, Hash)>] ReturnResponseListCompanyWorkerCompCode data, response status code and response headers
    def get_company_workers_comp_codes_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_company_workers_comp_codes_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_company_workers_comp_codes_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/workers-comp-codes".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'work_comp_code'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyWorkerCompCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_company_workers_comp_codes_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEmployeeLocation
    # Gets the employee location
    # @param company_id companyId
    # @param employee_id employeeId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseMyLocation]
    def get_current_locations_using_get1(company_id, employee_id, opts = {})
      data, _status_code, _headers = get_current_locations_using_get1_with_http_info(company_id, employee_id, opts)
      return data
    end

    # getEmployeeLocation
    # Gets the employee location
    # @param company_id companyId
    # @param employee_id employeeId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseMyLocation, Fixnum, Hash)>] ReturnResponseMyLocation data, response status code and response headers
    def get_current_locations_using_get1_with_http_info(company_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_current_locations_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_current_locations_using_get1" if company_id.nil?
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling CompanyConfigServicesApi.get_current_locations_using_get1" if employee_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/{employeeId}/current-location".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseMyLocation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_current_locations_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getDeliveryMethods
    # Gets the company delivery methods list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_delivery_methods_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_delivery_methods_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getDeliveryMethods
    # Gets the company delivery methods list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_delivery_methods_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_delivery_methods_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_delivery_methods_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/delivery-methods".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_delivery_methods_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getDemotionReasons
    # Gets the employee demotion reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [ReturnResponseListSelectItem]
    def get_demotion_reasons_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_demotion_reasons_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getDemotionReasons
    # Gets the employee demotion reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_demotion_reasons_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_demotion_reasons_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_demotion_reasons_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/demotion-reasons".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'reason_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_demotion_reasons_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getDirectManager
    # Gets the direct manager
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :manager_id managerId
    # @return [ReturnResponseListSelectItem]
    def get_direct_manager_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_direct_manager_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getDirectManager
    # Gets the direct manager
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :manager_id managerId
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_direct_manager_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_direct_manager_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_direct_manager_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/direct-managers".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'manager_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_direct_manager_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEarnTypes
    # Gets the company earn types
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_earn_types_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_earn_types_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getEarnTypes
    # Gets the company earn types
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_earn_types_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_earn_types_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_earn_types_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/earn-types".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_earn_types_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEmployeeJobProfile
    # Gets the employee job profile details
    # @param company_id companyId
    # @param employee_id employeeId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseobject]
    def get_employee_job_profile_using_get3(company_id, employee_id, opts = {})
      data, _status_code, _headers = get_employee_job_profile_using_get3_with_http_info(company_id, employee_id, opts)
      return data
    end

    # getEmployeeJobProfile
    # Gets the employee job profile details
    # @param company_id companyId
    # @param employee_id employeeId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseobject, Fixnum, Hash)>] ReturnResponseobject data, response status code and response headers
    def get_employee_job_profile_using_get3_with_http_info(company_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_employee_job_profile_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_employee_job_profile_using_get3" if company_id.nil?
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling CompanyConfigServicesApi.get_employee_job_profile_using_get3" if employee_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/{employeeId}/job-profiles".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseobject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_employee_job_profile_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEmployeePayChangeReasons
    # Gets the employee pay change reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [ReturnResponseListSelectItem]
    def get_employee_pay_change_reasons_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_employee_pay_change_reasons_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getEmployeePayChangeReasons
    # Gets the employee pay change reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_employee_pay_change_reasons_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_employee_pay_change_reasons_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_employee_pay_change_reasons_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/paychange-reasons".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'reason_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_employee_pay_change_reasons_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEmployeeTransferReasons
    # Gets the employee transfer reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [ReturnResponseListSelectItem]
    def get_employee_transfer_reasons_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_employee_transfer_reasons_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getEmployeeTransferReasons
    # Gets the employee transfer reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_employee_transfer_reasons_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_employee_transfer_reasons_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_employee_transfer_reasons_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/transfer-reasons".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'reason_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_employee_transfer_reasons_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getJobReclassificationReasons
    # Gets the employee job reclassification reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [ReturnResponseListSelectItem]
    def get_job_reclassification_reasons_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_job_reclassification_reasons_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getJobReclassificationReasons
    # Gets the employee job reclassification reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_job_reclassification_reasons_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_job_reclassification_reasons_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_job_reclassification_reasons_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/job-reclassification-reasons".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'reason_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_job_reclassification_reasons_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPayFrequencies
    # Gets the company pay frequencies
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_pay_frequencies_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_pay_frequencies_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getPayFrequencies
    # Gets the company pay frequencies
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_pay_frequencies_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_pay_frequencies_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_pay_frequencies_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/pay-frequencies".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_pay_frequencies_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get pay group
    # Get pay group
    # @param company_id companyId
    # @param paygroup_id paygroupId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponsePayGroup]
    def get_pay_groups_using_get1(company_id, paygroup_id, opts = {})
      data, _status_code, _headers = get_pay_groups_using_get1_with_http_info(company_id, paygroup_id, opts)
      return data
    end

    # Get pay group
    # Get pay group
    # @param company_id companyId
    # @param paygroup_id paygroupId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponsePayGroup, Fixnum, Hash)>] ReturnResponsePayGroup data, response status code and response headers
    def get_pay_groups_using_get1_with_http_info(company_id, paygroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_pay_groups_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_pay_groups_using_get1" if company_id.nil?
      # verify the required parameter 'paygroup_id' is set
      fail ArgumentError, "Missing the required parameter 'paygroup_id' when calling CompanyConfigServicesApi.get_pay_groups_using_get1" if paygroup_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/pay-groups/{paygroupId}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'paygroupId' + '}', paygroup_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponsePayGroup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_pay_groups_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPayMethods
    # Gets the company pay methods
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_pay_methods_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_pay_methods_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getPayMethods
    # Gets the company pay methods
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_pay_methods_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_pay_methods_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_pay_methods_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/payment-methods".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_pay_methods_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPerformanceMgmtJobCodes
    # Gets the company performance management job codes
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListCompanyLeavePlan]
    def get_performance_mgmt_job_codes_using_get1(company_id, opts = {})
      data, _status_code, _headers = get_performance_mgmt_job_codes_using_get1_with_http_info(company_id, opts)
      return data
    end

    # getPerformanceMgmtJobCodes
    # Gets the company performance management job codes
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListCompanyLeavePlan, Fixnum, Hash)>] ReturnResponseListCompanyLeavePlan data, response status code and response headers
    def get_performance_mgmt_job_codes_using_get1_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_performance_mgmt_job_codes_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_performance_mgmt_job_codes_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/performance-mgmt-job-codes".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListCompanyLeavePlan')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_performance_mgmt_job_codes_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPromotionReasons
    # Gets the employee promotion reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [ReturnResponseListSelectItem]
    def get_promotion_reasons_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_promotion_reasons_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getPromotionReasons
    # Gets the employee promotion reasons list
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason_id reasonId
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_promotion_reasons_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_promotion_reasons_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_promotion_reasons_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/promotion-reasons".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'reason_id'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_promotion_reasons_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getRoles
    # Gets the roles list
    # @param company_id companyId
    # @param employee_id employeeId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role_type roleType
    # @return [ReturnResponseobject]
    def get_roles_using_get1(company_id, employee_id, opts = {})
      data, _status_code, _headers = get_roles_using_get1_with_http_info(company_id, employee_id, opts)
      return data
    end

    # getRoles
    # Gets the roles list
    # @param company_id companyId
    # @param employee_id employeeId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :role_type roleType
    # @return [Array<(ReturnResponseobject, Fixnum, Hash)>] ReturnResponseobject data, response status code and response headers
    def get_roles_using_get1_with_http_info(company_id, employee_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_roles_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_roles_using_get1" if company_id.nil?
      # verify the required parameter 'employee_id' is set
      fail ArgumentError, "Missing the required parameter 'employee_id' when calling CompanyConfigServicesApi.get_roles_using_get1" if employee_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/{employeeId}/roles{?roleType}".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'employeeId' + '}', employee_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'roleType'] = opts[:'role_type'] if !opts[:'role_type'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseobject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_roles_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getSpecialPayDesc
    # Gets the company special pay description
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_special_pay_desc_using_get3(company_id, opts = {})
      data, _status_code, _headers = get_special_pay_desc_using_get3_with_http_info(company_id, opts)
      return data
    end

    # getSpecialPayDesc
    # Gets the company special pay description
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_special_pay_desc_using_get3_with_http_info(company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_special_pay_desc_using_get3 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_special_pay_desc_using_get3" if company_id.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/special-payments".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_special_pay_desc_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getWorkersCompLookUp
    # Gets the worker comp code details
    # @param company_id companyId
    # @param state state
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_workers_comp_look_up_using_get1(company_id, state, opts = {})
      data, _status_code, _headers = get_workers_comp_look_up_using_get1_with_http_info(company_id, state, opts)
      return data
    end

    # getWorkersCompLookUp
    # Gets the worker comp code details
    # @param company_id companyId
    # @param state state
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_workers_comp_look_up_using_get1_with_http_info(company_id, state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CompanyConfigServicesApi.get_workers_comp_look_up_using_get1 ..."
      end
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling CompanyConfigServicesApi.get_workers_comp_look_up_using_get1" if company_id.nil?
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling CompanyConfigServicesApi.get_workers_comp_look_up_using_get1" if state.nil?
      # resource path
      local_var_path = "/v1/company/{companyId}/{state}/workers-comp".sub('{format}','json').sub('{' + 'companyId' + '}', company_id.to_s).sub('{' + 'state' + '}', state.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CompanyConfigServicesApi#get_workers_comp_look_up_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
