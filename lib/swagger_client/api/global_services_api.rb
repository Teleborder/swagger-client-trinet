=begin
#Trinet API

#Config API Specification

OpenAPI spec version: 1.0.0
Contact: api@trinet.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class GlobalServicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # createPartnerAccess
    # Creates the partner access
    # @param partner_api_access partnerApiAccess
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseobject]
    def create_partner_access_using_post1(partner_api_access, opts = {})
      data, _status_code, _headers = create_partner_access_using_post1_with_http_info(partner_api_access, opts)
      return data
    end

    # createPartnerAccess
    # Creates the partner access
    # @param partner_api_access partnerApiAccess
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseobject, Fixnum, Hash)>] ReturnResponseobject data, response status code and response headers
    def create_partner_access_using_post1_with_http_info(partner_api_access, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.create_partner_access_using_post1 ..."
      end
      # verify the required parameter 'partner_api_access' is set
      fail ArgumentError, "Missing the required parameter 'partner_api_access' when calling GlobalServicesApi.create_partner_access_using_post1" if partner_api_access.nil?
      # resource path
      local_var_path = "/v1/global/partner-companies".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(partner_api_access)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseobject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#create_partner_access_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # generateLocationCode
    # Generates the location code
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponsestring]
    def generate_location_code_using_get3(opts = {})
      data, _status_code, _headers = generate_location_code_using_get3_with_http_info(opts)
      return data
    end

    # generateLocationCode
    # Generates the location code
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponsestring, Fixnum, Hash)>] ReturnResponsestring data, response status code and response headers
    def generate_location_code_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.generate_location_code_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/location-code".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponsestring')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#generate_location_code_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAccessTypesList
    # Gets the access types list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_access_types_list_using_get1(opts = {})
      data, _status_code, _headers = get_access_types_list_using_get1_with_http_info(opts)
      return data
    end

    # getAccessTypesList
    # Gets the access types list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_access_types_list_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_access_types_list_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/access-types".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_access_types_list_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAddressTypesList
    # Gets the address types list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_address_types_list_using_get1(opts = {})
      data, _status_code, _headers = get_address_types_list_using_get1_with_http_info(opts)
      return data
    end

    # getAddressTypesList
    # Gets the address types list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_address_types_list_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_address_types_list_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/address-types".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_address_types_list_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCitizenships
    # Gets the citizenships list
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_citizenships_using_get3(country_code, opts = {})
      data, _status_code, _headers = get_citizenships_using_get3_with_http_info(country_code, opts)
      return data
    end

    # getCitizenships
    # Gets the citizenships list
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_citizenships_using_get3_with_http_info(country_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_citizenships_using_get3 ..."
      end
      # verify the required parameter 'country_code' is set
      fail ArgumentError, "Missing the required parameter 'country_code' when calling GlobalServicesApi.get_citizenships_using_get3" if country_code.nil?
      # resource path
      local_var_path = "/v1/global/{countryCode}/citizenships".sub('{format}','json').sub('{' + 'countryCode' + '}', country_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_citizenships_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCompBasisTypes
    # Gets the compensation basis types list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comp_code compCode
    # @return [ReturnResponseListSelectItem]
    def get_comp_basis_types_using_get3(opts = {})
      data, _status_code, _headers = get_comp_basis_types_using_get3_with_http_info(opts)
      return data
    end

    # getCompBasisTypes
    # Gets the compensation basis types list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :comp_code compCode
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_comp_basis_types_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_comp_basis_types_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/compensation-types".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'comp_code'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_comp_basis_types_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getCountriesList
    # Gets the country list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_countries_list_using_get3(opts = {})
      data, _status_code, _headers = get_countries_list_using_get3_with_http_info(opts)
      return data
    end

    # getCountriesList
    # Gets the country list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_countries_list_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_countries_list_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/countries".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_countries_list_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEmploymentTypes
    # Gets the employment types list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_type employeeType
    # @return [ReturnResponseListSelectItem]
    def get_employment_types_using_get1(opts = {})
      data, _status_code, _headers = get_employment_types_using_get1_with_http_info(opts)
      return data
    end

    # getEmploymentTypes
    # Gets the employment types list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_type employeeType
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_employment_types_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_employment_types_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/employment-types".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'employee_type'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_employment_types_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getEthnicityList
    # Gets the ethnicity list
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_ethnicity_list_using_get3(country_code, opts = {})
      data, _status_code, _headers = get_ethnicity_list_using_get3_with_http_info(country_code, opts)
      return data
    end

    # getEthnicityList
    # Gets the ethnicity list
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_ethnicity_list_using_get3_with_http_info(country_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_ethnicity_list_using_get3 ..."
      end
      # verify the required parameter 'country_code' is set
      fail ArgumentError, "Missing the required parameter 'country_code' when calling GlobalServicesApi.get_ethnicity_list_using_get3" if country_code.nil?
      # resource path
      local_var_path = "/v1/global/{countryCode}/ethnicities".sub('{format}','json').sub('{' + 'countryCode' + '}', country_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_ethnicity_list_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFlsaTypes
    # Gets the FLSA types list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flsa_code flsaCode
    # @return [ReturnResponseListSelectItem]
    def get_flsa_types_using_get1(opts = {})
      data, _status_code, _headers = get_flsa_types_using_get1_with_http_info(opts)
      return data
    end

    # getFlsaTypes
    # Gets the FLSA types list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :flsa_code flsaCode
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_flsa_types_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_flsa_types_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/flsa-codes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'flsa_code'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_flsa_types_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getFormOfAddressList
    # Gets the form of address list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_form_of_address_list_using_get1(opts = {})
      data, _status_code, _headers = get_form_of_address_list_using_get1_with_http_info(opts)
      return data
    end

    # getFormOfAddressList
    # Gets the form of address list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_form_of_address_list_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_form_of_address_list_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/titles".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_form_of_address_list_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getGenderList
    # Gets the gender list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_gender_list_using_get1(opts = {})
      data, _status_code, _headers = get_gender_list_using_get1_with_http_info(opts)
      return data
    end

    # getGenderList
    # Gets the gender list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_gender_list_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_gender_list_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/genders".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_gender_list_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMaritalStatusList
    # Gets the marital status list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_marital_status_list_using_get1(opts = {})
      data, _status_code, _headers = get_marital_status_list_using_get1_with_http_info(opts)
      return data
    end

    # getMaritalStatusList
    # Gets the marital status list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_marital_status_list_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_marital_status_list_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/marital-statuses".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_marital_status_list_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMediaList
    # Gets the media list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_media_list_using_get3(opts = {})
      data, _status_code, _headers = get_media_list_using_get3_with_http_info(opts)
      return data
    end

    # getMediaList
    # Gets the media list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_media_list_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_media_list_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/media-types".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_media_list_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getMilitaryStatusList
    # Gets the military status list
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_military_status_list_using_get3(country_code, opts = {})
      data, _status_code, _headers = get_military_status_list_using_get3_with_http_info(country_code, opts)
      return data
    end

    # getMilitaryStatusList
    # Gets the military status list
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_military_status_list_using_get3_with_http_info(country_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_military_status_list_using_get3 ..."
      end
      # verify the required parameter 'country_code' is set
      fail ArgumentError, "Missing the required parameter 'country_code' when calling GlobalServicesApi.get_military_status_list_using_get3" if country_code.nil?
      # resource path
      local_var_path = "/v1/global/{countryCode}/military-statuses".sub('{format}','json').sub('{' + 'countryCode' + '}', country_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_military_status_list_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getNotificationDetails
    # Gets the notification details list
    # @param notification_id notificationId
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseNotification]
    def get_notification_details_using_get1(notification_id, company_id, opts = {})
      data, _status_code, _headers = get_notification_details_using_get1_with_http_info(notification_id, company_id, opts)
      return data
    end

    # getNotificationDetails
    # Gets the notification details list
    # @param notification_id notificationId
    # @param company_id companyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseNotification, Fixnum, Hash)>] ReturnResponseNotification data, response status code and response headers
    def get_notification_details_using_get1_with_http_info(notification_id, company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_notification_details_using_get1 ..."
      end
      # verify the required parameter 'notification_id' is set
      fail ArgumentError, "Missing the required parameter 'notification_id' when calling GlobalServicesApi.get_notification_details_using_get1" if notification_id.nil?
      # verify the required parameter 'company_id' is set
      fail ArgumentError, "Missing the required parameter 'company_id' when calling GlobalServicesApi.get_notification_details_using_get1" if company_id.nil?
      # resource path
      local_var_path = "/v1/global/{companyId}/{notificationId}/notification-details".sub('{format}','json').sub('{' + 'notificationId' + '}', notification_id.to_s).sub('{' + 'companyId' + '}', company_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseNotification')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_notification_details_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPayDetCdList
    # Gets the pay deduction codes list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pay_det_cd payDetCd
    # @option opts [String] :tax_ind taxInd
    # @return [ReturnResponseListSelectItem]
    def get_pay_det_cd_list_using_get3(opts = {})
      data, _status_code, _headers = get_pay_det_cd_list_using_get3_with_http_info(opts)
      return data
    end

    # getPayDetCdList
    # Gets the pay deduction codes list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pay_det_cd payDetCd
    # @option opts [String] :tax_ind taxInd
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_pay_det_cd_list_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_pay_det_cd_list_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/pay-deduction-codes{?payDetCd,taxInd}".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'payDetCd'] = opts[:'pay_det_cd'] if !opts[:'pay_det_cd'].nil?
      query_params[:'taxInd'] = opts[:'tax_ind'] if !opts[:'tax_ind'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_pay_det_cd_list_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getPreferences
    # Gets the preferences list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_preferences_using_get1(opts = {})
      data, _status_code, _headers = get_preferences_using_get1_with_http_info(opts)
      return data
    end

    # getPreferences
    # Gets the preferences list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_preferences_using_get1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_preferences_using_get1 ..."
      end
      # resource path
      local_var_path = "/v1/global/preferences".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_preferences_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getRelationShips
    # Gets the relationships list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_relation_ships_using_get3(opts = {})
      data, _status_code, _headers = get_relation_ships_using_get3_with_http_info(opts)
      return data
    end

    # getRelationShips
    # Gets the relationships list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_relation_ships_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_relation_ships_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/relationships".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_relation_ships_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getStatesListByCountry
    # Gets the state list by country
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_states_list_by_country_using_get3(country_code, opts = {})
      data, _status_code, _headers = get_states_list_by_country_using_get3_with_http_info(country_code, opts)
      return data
    end

    # getStatesListByCountry
    # Gets the state list by country
    # @param country_code countryCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_states_list_by_country_using_get3_with_http_info(country_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_states_list_by_country_using_get3 ..."
      end
      # verify the required parameter 'country_code' is set
      fail ArgumentError, "Missing the required parameter 'country_code' when calling GlobalServicesApi.get_states_list_by_country_using_get3" if country_code.nil?
      # resource path
      local_var_path = "/v1/global/countries/{countryCode}/states".sub('{format}','json').sub('{' + 'countryCode' + '}', country_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_states_list_by_country_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getStatesProvincDesc
    # Gets the states province description list
    # @param country_code countryCode
    # @param state_code stateCode
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseStateDesc]
    def get_states_provinc_desc_using_get1(country_code, state_code, opts = {})
      data, _status_code, _headers = get_states_provinc_desc_using_get1_with_http_info(country_code, state_code, opts)
      return data
    end

    # getStatesProvincDesc
    # Gets the states province description list
    # @param country_code countryCode
    # @param state_code stateCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseStateDesc, Fixnum, Hash)>] ReturnResponseStateDesc data, response status code and response headers
    def get_states_provinc_desc_using_get1_with_http_info(country_code, state_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_states_provinc_desc_using_get1 ..."
      end
      # verify the required parameter 'country_code' is set
      fail ArgumentError, "Missing the required parameter 'country_code' when calling GlobalServicesApi.get_states_provinc_desc_using_get1" if country_code.nil?
      # verify the required parameter 'state_code' is set
      fail ArgumentError, "Missing the required parameter 'state_code' when calling GlobalServicesApi.get_states_provinc_desc_using_get1" if state_code.nil?
      # resource path
      local_var_path = "/v1/global/countries/{countryCode}/states/{stateCode}".sub('{format}','json').sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'stateCode' + '}', state_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseStateDesc')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_states_provinc_desc_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getSuffixList
    # Gets the suffix list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_suffix_list_using_get3(opts = {})
      data, _status_code, _headers = get_suffix_list_using_get3_with_http_info(opts)
      return data
    end

    # getSuffixList
    # Gets the suffix list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_suffix_list_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_suffix_list_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/suffixes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_suffix_list_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getTaxMaritalStatusList
    # Gets the tax marital status list
    # @param [Hash] opts the optional parameters
    # @return [ReturnResponseListSelectItem]
    def get_tax_marital_status_list_using_get3(opts = {})
      data, _status_code, _headers = get_tax_marital_status_list_using_get3_with_http_info(opts)
      return data
    end

    # getTaxMaritalStatusList
    # Gets the tax marital status list
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnResponseListSelectItem, Fixnum, Hash)>] ReturnResponseListSelectItem data, response status code and response headers
    def get_tax_marital_status_list_using_get3_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: GlobalServicesApi.get_tax_marital_status_list_using_get3 ..."
      end
      # resource path
      local_var_path = "/v1/global/tax-marital-stats".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['*/*']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReturnResponseListSelectItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalServicesApi#get_tax_marital_status_list_using_get3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
