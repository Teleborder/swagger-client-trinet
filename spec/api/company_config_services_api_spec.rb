=begin
#Trinet API

#Config API Specification

OpenAPI spec version: 1.0.0
Contact: api@trinet.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::CompanyConfigServicesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CompanyConfigServicesApi' do
  before do
    # run before each test
    @instance = SwaggerClient::CompanyConfigServicesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CompanyConfigServicesApi' do
    it 'should create an instact of CompanyConfigServicesApi' do
      expect(@instance).to be_instance_of(SwaggerClient::CompanyConfigServicesApi)
    end
  end

  # unit tests for find_by_dept_id_using_get1
  # findByDeptId
  # Gets the company departments details by Id
  # @param company_id companyId
  # @param department_id departmentId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :dept_name deptName
  # @option opts [String] :include include
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponseListDepartment]
  describe 'find_by_dept_id_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_by_dept_name_using_get3
  # findByDeptName
  # Gets the company departments details by name
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :dept_name deptName
  # @option opts [String] :include include
  # @option opts [String] :dept_code deptCode
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponseListDepartment]
  describe 'find_by_dept_name_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benefit_plan_year_using_get1
  # getBenefitPlanYear
  # Gets the company benefit plan details
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponseBenefitPlanYear]
  describe 'get_benefit_plan_year_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_current_benefits_using_get1
  # getClientCurrentBenefits
  # Gets the company current benefits
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :efft_date efftDate
  # @return [ReturnResponseListCurrentBenefits]
  describe 'get_client_current_benefits_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_benefit_classes_using_get1
  # getCompanyBenefitClasses
  # Gets the company benefit classes list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponseListBenefitClass]
  describe 'get_company_benefit_classes_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_holiday_using_get3
  # getCompanyHoliday
  # Gets the company holiday details
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date_limit dateLimit
  # @return [ReturnResponseCompanyHolidayDetails]
  describe 'get_company_holiday_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_jobs_using_get3
  # getCompanyJobs
  # Gets the company jobs
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :job_id jobId
  # @return [ReturnResponseListSelectItem]
  describe 'get_company_jobs_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_leave_plan_details_using_get3
  # getCompanyLeavePlanDetails
  # Gets the company leave plan details list
  # @param company_id companyId
  # @param plan_type planType
  # @param [Hash] opts the optional parameters
  # @option opts [String] :benefit_plan benefitPlan
  # @return [ReturnResponseListCompanyLeavePlanDetail]
  describe 'get_company_leave_plan_details_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_leave_plans_using_get1
  # getCompanyLeavePlans
  # Gets the company leave plans list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :leave leave
  # @option opts [String] :employee_id employeeId
  # @return [ReturnResponseListCompanyLeavePlan]
  describe 'get_company_leave_plans_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_location_using_get3
  # getCompanyLocationByLocationId
  # Gets the current locations
  # @param company_id companyId
  # @param location_id locationId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponseLocation]
  describe 'get_company_location_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_locations_using_get1
  # getCompanyLocations
  # Gets the company locations
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include include
  # @option opts [String] :location_name locationName
  # @option opts [String] :state_code stateCode
  # @option opts [BOOLEAN] :headquarter headquarter
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponseListLocation]
  describe 'get_company_locations_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_pay_codes_using_get1
  # getCompanyPayCodes
  # Gets the company pay codes
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type type
  # @return [ReturnResponseListCompanyPayCode]
  describe 'get_company_pay_codes_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_pay_group_using_get1
  # getCompanyPayGroup
  # Gets the company pay gorup details
  # @param company_id companyId
  # @param paygroup_id paygroupId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponsePayGroup]
  describe 'get_company_pay_group_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_pay_groups_using_get3
  # getCompanyPayGroups
  # Gets the company pay gorups list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :effective_date effectiveDate
  # @return [ReturnResponseListPayGroup]
  describe 'get_company_pay_groups_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_payroll_schedules_by_paygroup_using_get1
  # getCompanyPayrollSchedulesByPaygroup
  # Gets the company payroll schedules by pay group Id
  # @param company_id companyId
  # @param paygroup paygroup
  # @param [Hash] opts the optional parameters
  # @option opts [String] :start_date startDate
  # @option opts [String] :end_date endDate
  # @return [ReturnResponseListCompanyPayrollSchedulePayGroup]
  describe 'get_company_payroll_schedules_by_paygroup_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_payroll_schedules_using_get1
  # getCompanyPayrollSchedules
  # Gets the company payroll schedules list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :start_date startDate
  # @option opts [String] :end_date endDate
  # @return [ReturnResponseListCompanyPayrollSchedulePayGroup]
  describe 'get_company_payroll_schedules_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_policies_using_get1
  # getCompanyPolicies
  # Get the company policies
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state state
  # @return [ReturnResponseListCompanyPolicy]
  describe 'get_company_policies_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_roles_using_get3
  # getCompanyRoles
  # Gets the company roles
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListRole]
  describe 'get_company_roles_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_savings_plans_details_using_get1
  # getCompanySavingsPlansDetails
  # Gets the company savings plans details list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListCompanySavingsPlan]
  describe 'get_company_savings_plans_details_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_schedule_holiday_using_get3
  # getCompanyScheduleHoliday
  # Gets the company holiday schedule
  # @param company_id companyId
  # @param schedule schedule
  # @param [Hash] opts the optional parameters
  # @option opts [String] :year year
  # @return [ReturnResponseCompanyHolidayDetails]
  describe 'get_company_schedule_holiday_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_skr_workers_comp_codes_using_get1
  # getCompanySKRWorkersCompCodes
  # Gets the company skr workers comp codes list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state state
  # @return [ReturnResponseListCompanyWorkerCompCode]
  describe 'get_company_skr_workers_comp_codes_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_supervisors_using_get3
  # getCompanySupervisors
  # Gets the company supervisors list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListCompanySupervisors]
  describe 'get_company_supervisors_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_company_workers_comp_codes_using_get1
  # getCompanyWorkersCompCodes
  # Gets the company workers comp codes list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state state
  # @option opts [String] :work_comp_code workCompCode
  # @return [ReturnResponseListCompanyWorkerCompCode]
  describe 'get_company_workers_comp_codes_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_current_locations_using_get1
  # getEmployeeLocation
  # Gets the employee location
  # @param company_id companyId
  # @param employee_id employeeId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseMyLocation]
  describe 'get_current_locations_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_delivery_methods_using_get1
  # getDeliveryMethods
  # Gets the company delivery methods list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListSelectItem]
  describe 'get_delivery_methods_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_demotion_reasons_using_get3
  # getDemotionReasons
  # Gets the employee demotion reasons list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :reason_id reasonId
  # @return [ReturnResponseListSelectItem]
  describe 'get_demotion_reasons_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_direct_manager_using_get1
  # getDirectManager
  # Gets the direct manager
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :manager_id managerId
  # @return [ReturnResponseListSelectItem]
  describe 'get_direct_manager_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_earn_types_using_get1
  # getEarnTypes
  # Gets the company earn types
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListSelectItem]
  describe 'get_earn_types_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_job_profile_using_get3
  # getEmployeeJobProfile
  # Gets the employee job profile details
  # @param company_id companyId
  # @param employee_id employeeId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseobject]
  describe 'get_employee_job_profile_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_pay_change_reasons_using_get3
  # getEmployeePayChangeReasons
  # Gets the employee pay change reasons list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :reason_id reasonId
  # @return [ReturnResponseListSelectItem]
  describe 'get_employee_pay_change_reasons_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee_transfer_reasons_using_get3
  # getEmployeeTransferReasons
  # Gets the employee transfer reasons list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :reason_id reasonId
  # @return [ReturnResponseListSelectItem]
  describe 'get_employee_transfer_reasons_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_job_reclassification_reasons_using_get1
  # getJobReclassificationReasons
  # Gets the employee job reclassification reasons list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :reason_id reasonId
  # @return [ReturnResponseListSelectItem]
  describe 'get_job_reclassification_reasons_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_frequencies_using_get3
  # getPayFrequencies
  # Gets the company pay frequencies
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListSelectItem]
  describe 'get_pay_frequencies_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_groups_using_get1
  # Get pay group
  # Get pay group
  # @param company_id companyId
  # @param paygroup_id paygroupId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponsePayGroup]
  describe 'get_pay_groups_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pay_methods_using_get3
  # getPayMethods
  # Gets the company pay methods
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListSelectItem]
  describe 'get_pay_methods_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_performance_mgmt_job_codes_using_get1
  # getPerformanceMgmtJobCodes
  # Gets the company performance management job codes
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListCompanyLeavePlan]
  describe 'get_performance_mgmt_job_codes_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_promotion_reasons_using_get3
  # getPromotionReasons
  # Gets the employee promotion reasons list
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :reason_id reasonId
  # @return [ReturnResponseListSelectItem]
  describe 'get_promotion_reasons_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_roles_using_get1
  # getRoles
  # Gets the roles list
  # @param company_id companyId
  # @param employee_id employeeId
  # @param [Hash] opts the optional parameters
  # @option opts [String] :role_type roleType
  # @return [ReturnResponseobject]
  describe 'get_roles_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_special_pay_desc_using_get3
  # getSpecialPayDesc
  # Gets the company special pay description
  # @param company_id companyId
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListSelectItem]
  describe 'get_special_pay_desc_using_get3 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_workers_comp_look_up_using_get1
  # getWorkersCompLookUp
  # Gets the worker comp code details
  # @param company_id companyId
  # @param state state
  # @param [Hash] opts the optional parameters
  # @return [ReturnResponseListSelectItem]
  describe 'get_workers_comp_look_up_using_get1 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
